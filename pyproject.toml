[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=64",
  "setuptools-scm>=8",
]

[project]
name = "btrfs2s3"
description = "Snapshot btrfs volumes and back them up to s3"
authors = [
  { name = "Steven Brudenell", email = "steven.brudenell@gmail.com" },
]
requires-python = ">=3.8"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dynamic = [
  "version",
]
dependencies = [
  "arrow>=1",
  "backports-zoneinfo; python_version<'3.9'",
  "boto3[crt]",
  "rich",
  "typing-extensions>=4.4",
  "tzdata",
]
scripts.btrfs2s3 = "btrfs2s3.main:main"

[tool.setuptools_scm]

[tool.ruff]
format.skip-magic-trailing-comma = true
lint.select = [
  "ALL",
]
lint.ignore = [
  "ANN101",
  "ANN102",
  "COM812",
  "ISC001",
]
lint.per-file-ignores."src/btrfs2s3/_internal/*" = [
  "PLR",
]
lint.per-file-ignores."src/btrfs2s3/assessor.py" = [
  "D",
]
lint.per-file-ignores."src/btrfs2s3/commands/*" = [
  "T",
]
lint.per-file-ignores."src/btrfs2s3/resolver.py" = [
  "D",
]
lint.per-file-ignores."tests/*" = [
  "D",
  "PLR",
  "S",
  "SLF",
]
lint.per-file-ignores."typeshed/*" = [
  "A",
]
lint.isort.force-single-line = true
lint.isort.force-sort-within-sections = true
lint.isort.order-by-type = false
lint.pydocstyle.convention = "google"

[tool.coverage.run]
plugins = [
  "covdefaults",
]
source = [
  "btrfs2s3",
  "tests",
]

[tool.tox]
legacy_tox_ini = """
  [tox]
  requires =
      tox>=4.2
  env_list =
      py

  [testenv]
  system_site_packages = true
  deps =
      covdefaults
      coverage
      moto[s3]
      pytest
  # btrfs2s3 requires --system-site-packages. This means we can generally end
  # up pulling in weird package versions in configurations that don't exist any
  # other way. In particular on Ubuntu 20.04, we can end up with
  # system-provided python3-openssl (version 19.0.0), but will end up
  # installing a newer version of cryptography. The old pyopenssl breaks with
  # the newer cryptography. This would resolve itself if pyopenssl had a proper
  # dependency like "cryptography>=X,<Y", but this was only introduced in newer
  # pyopenssl.
      pyopenssl>=22.1
  # similarly: we pull markupsafe>=2, which breaks jinja2<3, but moto depends
  # only on jinja2>=2.10.1
      jinja2>=3
  commands =
      coverage erase
      coverage run -m pytest {posargs}
      coverage report
"""

[tool.mypy]
mypy_path = "typeshed"
strict = true
